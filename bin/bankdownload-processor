#!/usr/bin/env python

import os,sys
import getopt
import hashlib
from traceback import print_exc
from bankdownloads import BankDownload
import MySQLdb


config_file=os.path.join(os.path.dirname(__file__),'../etc/bankdownloads.conf')

#renames files for use in openportfolio
mapping={
    'ing-evan':[1,'Evan Davey'],
    'ing-vanessa':[1,'Vanessa Cochrane'],
    'ing-joint':[1,'Evan Davey & Vanessa Cochrane'],
    'ing-accvanessa':[2,'Vanessa Cochrane'],
    'cbacash-evan':[3,'Evan Davey'],
    'cbacash-vanessa':[3,'Vanessa Cochrane'],
    'rabo-142201002687000':[4,'Evan Davey'],
    'rabo-142201002072100':[4,'Evan Davey & Vanessa Cochrane'],
    'firststate-evan':[99,'Evan Davey'],
    'firststate-vanessa':[99,'Vanessa Cochrane'],

}


def file_md5(filename):
       md5 = hashlib.md5()
       with open(filename,'rb') as f: 
           for chunk in iter(lambda: f.read(128*md5.block_size), ''): 
               md5.update(chunk)
       return md5.hexdigest()

def processfiles(srchpath,outpath,db,db_host,db_user,db_password):

      
    fileExtList=[".csv",".ofx",".qfx"]


    print "Searching: " + srchpath
    print "Output to: " + outpath

    if not os.path.exists(srchpath): 
        raise Exception("Search path %s does not exist" % srchpath)
    
    if not os.path.exists(outpath): 
        raise Exception("Output path %s does not exist" % outpath)

    
    files=os.listdir(srchpath)

    try:
        print 'Establishing connection to %s@%s' % (db,db_host) 
        db=MySQLdb.connect(host=db_host,user=db_user,passwd=db_pword,db=db)
       
        c=db.cursor(MySQLdb.cursors.DictCursor)
    except:
        print_exc()
        raise Exception("Could not connect to %s at %s with user %s and password %s" % (db,db_host,db_user,db_pword))
    
    print "Checking (%s) file/s vs the database..." % (len(files))
    
    changed_files=[]    
    for f in files:
        try:

            if os.path.splitext(f)[1] in fileExtList:
                chksum=file_md5(os.path.join(srchpath,f))
                
                sql=""" 
                    SELECT * 
                    FROM downloads
                    WHERE 
                        name='%s'
                
                """ % f
                
                #print sql
                c.execute(sql)
                r=c.fetchone()
              
                if r is None:
                    sql=""" 
                        INSERT INTO downloads
                        VALUES ('%s','%s',NULL,NULL) 

                    """ % (f,chksum)
                    
                    try:
                        c.execute(sql)
                        print "\tInserted record for %s,%s" % (f,chksum)
                        changed_files.append(f)
                    except:
                        print "\tError inserting record for %s" % f
                        print_exc()
                else:
                    if r['chksum'] != chksum:
                        print "\tChecksums differ for %s" % f
                        changed_files.append(f)
                        
                        sql=""" 
                            UPDATE downloads
                            SET chksum='%s'
                            WHERE 
                                name='%s'
                        """ % (chksum,f)
                        
                        try:
                            c.execute(sql)
                            print "\tUpdated checksum for %s,%s" % (f,chksum)
                        except:
                            print "\tError updating record for %s" % f
                            print_exc()
                        
                    else:
                        print "\t%s unchanged" % f
                
        except:
            print_exc()



    print "Processing (%s) changed file/s..." % (len(changed_files))

    for f in changed_files:
        mydownload = BankDownload(os.path.join(srchpath,f))
        r=mydownload.load()
        #mydownload.printdata()

        if r:
            print "\tLoad failed for: "+ srchpath+f
        else:

            ofxfile=mydownload.generatefilename()
            
            print "\tGenerated file name: %s" % ofxfile
            
            dt=ofxfile.split('_')[0]
            bank=ofxfile.split('_')[1]
            acc=ofxfile.split('_')[2]

            try:
                k=bank+'-'+acc
                print "\t\tLookup Key: %s" % k

                i_id=mapping[k][0]
                p_id=mapping[k][1]

                nf="%s_%s_%s.ofx" % (i_id,p_id,dt)
                print "\t\tNew file name: %s" % nf
                
                out_f=os.path.join(OUTPUT_PATH,nf)
                mydownload.writeofx(out_f)
                os.chown(out_f,1028,1028)
			
            except:
                print "Error processing file %s" % (f)
                print print_exc()
                sql=""" 
                DELETE FROM downloads
                WHERE 
                name='%s' and chksum='%s'
                """ % (f,chksum)

                try:
                    c.execute(sql)
                    print "\tDeleted record for %s,%s" % (f,chksum)
                except:
                    print "\tError deleting record for %s" % f
                    print_exc()
  
        del mydownload
            
        
        
    c.close()
    db.commit()
    db.close()
   
    return 0

if __name__ == "__main__":
    import ConfigParser
    from optparse import OptionParser
    
    parser = OptionParser()
    parser.add_option("-c", "--config", dest="config_file",
                      help="use config file FILE",type="string",metavar="FILE",default=config_file)
    
    (options, args) = parser.parse_args()
    
    config = ConfigParser.ConfigParser()
    
    config.read(options.config_file)
    
    db_user=config.get('mysql', 'user').strip("'")
    db=config.get('mysql', 'database').strip("'")
    db_host=config.get('mysql', 'host').strip("'")
    db_pword=config.get('mysql', 'password').strip("'")
    
    try: 
        inpath=args[0]
    except:
        inpath=config.get('paths', 'inputpath').strip("'")
    
    try: 
        outpath=args[1]
    except:
        outpath=config.get('paths', 'outputpath').strip("'")
    
    processfiles(inpath,outpath,db,db_host,db_user,db_pword)
